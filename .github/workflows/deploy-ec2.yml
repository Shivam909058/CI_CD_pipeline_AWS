name: 🚀 Deploy to AWS EC2

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AWS_REGION: us-east-1
  
jobs:
  # Job 1: Build and Test
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Build Application
      run: |
        echo "Building application..."
        mkdir -p dist
        
        # Debug - Show directory structure
        echo "Directory structure:"
        find . -type f -name "*.html" -o -name "*.css" -o -name "*.js" | sort
        
        # Copy your specific files
        cp CI_CD_pipeline_AWS/index.html dist/ || echo "Failed to copy index.html"
        cp CI_CD_pipeline_AWS/styles.css dist/ || echo "Failed to copy styles.css"
        cp CI_CD_pipeline_AWS/script.js dist/ || echo "Failed to copy script.js"
        
        # Show what we've copied
        echo "Files in dist directory:"
        ls -la dist/
        
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 7

  # Job 2: Deploy to EC2
  deploy-ec2:
    name: 🚀 Deploy to EC2
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
      
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./build
        
    - name: 🔧 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 🔑 Manual SSH and SCP
      run: |
        # Create SSH key
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add host key
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
        # Show what we're deploying
        echo "Files to deploy:"
        ls -la build/
        
        # Make sure target directory exists
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER || 'ec2-user' }}@${{ secrets.EC2_HOST }} "mkdir -p /tmp/build"
        
        # Copy files
        scp -r build/* ${{ secrets.EC2_USER || 'ec2-user' }}@${{ secrets.EC2_HOST }}:/tmp/build/
        
        # Execute deployment script
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER || 'ec2-user' }}@${{ secrets.EC2_HOST }} "
          # Clear the target directory to ensure no old files remain
          sudo rm -rf /var/www/html/taskmanager/*
          
          # Copy new files
          sudo cp -r /tmp/build/* /var/www/html/taskmanager/
          
          # Set ownership and permissions
          sudo chown -R nginx:nginx /var/www/html/taskmanager/
          sudo chmod -R 755 /var/www/html/taskmanager/
          
          # Show deployed files
          ls -la /var/www/html/taskmanager/
          
          # Restart nginx
          sudo systemctl restart nginx
        "
        
    - name: 🧪 Health Check
      run: |
        echo "Performing health check..."
        sleep 10
        
        # Check if the application is accessible
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}/taskmanager/ || echo "000")
        
        if [ "$RESPONSE" = "200" ]; then
          echo "✅ Health check passed! Application is running."
        else
          echo "❌ Health check failed! HTTP status: $RESPONSE"
        fi
      continue-on-error: true
        
    - name: 🔄 Force Cache Refresh
      run: |
        # Attempt to force the browser to refresh its cache
        curl -X PURGE http://${{ secrets.EC2_HOST }}/taskmanager/ || true
        curl -X PURGE http://${{ secrets.EC2_HOST }}/taskmanager/index.html || true
        curl -X PURGE http://${{ secrets.EC2_HOST }}/taskmanager/styles.css || true
        curl -X PURGE http://${{ secrets.EC2_HOST }}/taskmanager/script.js || true
      continue-on-error: true
        
    - name: 🔔 Deployment Summary
      if: always()
      run: |
        echo "🎉 Deployment process completed"
        echo "🌐 Application URL: http://${{ secrets.EC2_HOST }}/taskmanager/"
        echo "🔄 Try a hard refresh in your browser (Ctrl+F5) to see the changes"
